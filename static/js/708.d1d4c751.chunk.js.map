{"version":3,"file":"static/js/708.d1d4c751.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contacts.selectors.js","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/App.module.css?6c4d","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactForm_button__eSwX9\",\"form\":\"ContactForm_form__dhl+T\"};","\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport css from './ContactForm.module.css';\n\n\nimport {\n  addContacThunk,\n  fetchContactsThunk,\n} from 'redux/contacts/contacts.reducer';\n\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  const onAddContact = event => {\n    event.preventDefault();\n\n    const name = event.currentTarget.elements.contactName.value;\n    const number = event.currentTarget.elements.contactNumber.value;\n\n    const formData = {\n      name,\n      number,\n    };\n\n    dispatch(addContacThunk(formData))\n      .unwrap()\n      .then(() => event.target.reset());\n  };\n\n    return (\n        \n      <form onSubmit={onAddContact} className={css.form}>\n        <label className={css.formLabel}>\n          <p className={css.labelText}>Name</p>\n          <input type=\"text\" name=\"contactName\" required />\n        </label>\n        <label className={css.formLabel}>\n          <p className={css.labelText}>Number</p>\n          <input type=\"tel\" name=\"contactNumber\" required />\n        </label> <br />\n        <button className={css.button} type=\"submit\">Add contact</button>\n      </form>\n    );\n \n\n}\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"button\":\"ContactList_button__7kL4l\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__gxreB\",\"name\":\"ContactItem_name__XjpNK\",\"number\":\"ContactItem_number__mfZ8x\"};","// import React from 'react';\n// import css from './ContactItem.module.css';\n// import { useDispatch } from 'react-redux';\n// import { deleteContactThunk } from 'redux/contacts/contacts.reducer';\n\n// const ContactItem = ({ contact }) => {\n//       const dispatch = useDispatch();\n\n//       const handleDeleteContacts = contactId => {\n//             dispatch(deleteContactThunk(contactId));\n//           };\n      \n      \n//       return (\n          \n//                   <li key={contact.id} className={css.item}>\n//                         <span className={css.name}>{contact.name}</span>\n//                         <span className={css.number}>{contact.phone}</span>\n//                          <button className={css.button} onClick={() => handleDeleteContacts(contact.id)}\n//                         type=\"button\">Delete</button>\n//                   </li>\n\n//       )  ; \n          \n      \n// };\n\n\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/contacts.reducer';\nimport css from './ContactItem.module.css';\n\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n \n  const onDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n  return (\n          \n                        <li key={contact.id} className={css.item}>\n                              <span className={css.name}>{contact.name}</span>\n                              <span className={css.number}>{contact.number}</span>\n                               <button className={css.button} onClick={() => onDeleteContact(contact.id)}\n                              type=\"button\">Delete</button>\n                        </li>\n      \n            )  ; \n}\n\nexport default ContactItem;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.phonebook.contacts;\nexport const selectContactsIsLoading = state => state.phonebook.isLoading;\nexport const selectContactsError = state => state.phonebook.error;\nexport const selectFilterTerm = state => state.contactsStore.filterTerm;\n\n\nexport const selectVisibleContacts = createSelector(\n    [ selectContacts, selectFilterTerm],\n     (contacts, filterTerm) => {\n       return contacts.filter(contact => contact.name.toLowerCase()\n        .includes(filterTerm.toLowerCase()))\n     }\n    )\n","\nimport css from './ContactList.module.css';\n// import React, { useEffect } from 'react';\nimport ContactItem from 'components/ContactItem/ContactItem';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchContactsThunk} from 'redux/contacts/contacts.reducer';\n// import { selectContacts, selectFilterTerm, selectVisibleContacts} from 'redux/contacts/contacts.selector';\n\n// const ContactList = () => {\n//   const dispatch = useDispatch();\n//   let contacts = useSelector(selectContacts);\n//   const filterContacts = useSelector(selectVisibleContacts);\n//   const filter = useSelector(selectFilterTerm);\n//   if (filter.length > 0) {\n//        contacts = filterContacts;   }\n  \n \n\n//   useEffect(() => {\n//     dispatch(fetchContactsThunk())\n//   }, [dispatch]);\n\n//        return (\n//         <ul className={css.list}>  \n//          {contacts.map(contact => (\n//               <ContactItem contact={contact} key={contact.id}/> \n//         ))  }\n//         </ul>\n//   )  ; \n  \n// }\n\n\nimport React, { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsThunk } from 'redux/contacts/contacts.reducer';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  \n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n            <ul className={css.list}>  \n             {contacts.map(contact => (\n                  <ContactItem contact={contact} key={contact.id}/> \n            ))  }\n            </ul>\n      )  ; \n}\n\nexport default ContactList;\n    \n    \n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"productList\":\"App_productList__ZcthI\"};","// import Loader from 'components/Loader/Loader';\nimport React from 'react';\n\n// import Filtering from 'components/Filtering/Filtering';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport css from 'components/App.module.css';\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import {\n//   addContacThunk,\n//   deleteContactThunk,\n//   fetchContactsThunk,\n// } from 'redux/contacts/contacts.reducer';\n// import {\n//   selectContacts,\n//   selectContactsError,\n//   selectContactsIsLoading,\n// } from 'redux/contacts/contacts.selectors';\n\nconst ContactsPage = () => {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   const isLoading = useSelector(selectContactsIsLoading);\n//   const error = useSelector(selectContactsError);\n\n//   useEffect(() => {\n//     dispatch(fetchContactsThunk());\n//   }, [dispatch]);\n\n//   const onAddContact = event => {\n//     event.preventDefault();\n\n//     const name = event.currentTarget.elements.contactName.value;\n//     const number = event.currentTarget.elements.contactNumber.value;\n\n//     const formData = {\n//       name,\n//       number,\n//     };\n\n//     dispatch(addContacThunk(formData))\n//       .unwrap()\n//       .then(() => event.target.reset());\n//   };\n\n//   const onDeleteContact = contactId => {\n//     dispatch(deleteContactThunk(contactId));\n//   };\n\n  // const showContacts = Array.isArray(contacts) && contacts.length > 0;\n  return (\n    // <div>\n    //   <form onSubmit={onAddContact}>\n    //     <h2>Add New Contact</h2>\n    //     <label>\n    //       <p>Name:</p>\n    //       <input\n    //         type=\"text\"\n    //         placeholder=\"Jacob Mercer\"\n    //         required\n    //         name=\"contactName\"\n    //       />\n    //     </label>\n    //     <label>\n    //       <p>Number:</p>\n    //       <input\n    //         type=\"text\"\n    //         placeholder=\"761-23-96\"\n    //         required\n    //         name=\"contactNumber\"\n    //         minLength={3}\n    //       />\n    //     </label>\n    //     <br />\n    //     <button type=\"submit\">✨ Add</button>\n    //   </form>\n    //   {error !== null && <p className=\"error-bage\">{error}</p>}\n    //   {isLoading && <Loader />}\n    //   <ul>\n    //     {showContacts &&\n    //       contacts.map(({ id, name, number }) => {\n    //         return (\n    //           <li key={id}>\n    //             <h3>\n    //               <span>{name}</span>\n    //               <button\n    //                 disabled={isLoading}\n    //                 onClick={() => onDeleteContact(id)}\n    //               >\n    //                 🤷‍♂️\n    //               </button>\n    //             </h3>\n    //             <p>{number}</p>\n    //           </li>\n    //         );\n    //       })}\n    //   </ul>\n    // </div>\n    <div className={css.container}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        {/* <Filtering /> */}\n        <ContactList />\n     </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["dispatch","useDispatch","useEffect","fetchContactsThunk","_jsxs","onSubmit","event","preventDefault","formData","name","currentTarget","elements","contactName","value","number","contactNumber","addContacThunk","unwrap","then","target","reset","className","css","children","_jsx","type","required","_ref","contact","onClick","contactId","id","deleteContactThunk","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","phonebook","contacts","contactsStore","filterTerm","filter","toLowerCase","includes","useSelector","ContactItem","ContactForm","ContactList"],"sourceRoot":""}